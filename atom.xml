<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>倪博</title>
  
  <subtitle>万物美好，我在中央</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-08-11T12:43:35.954Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>倪博</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Maya Code</title>
    <link href="http://example.com/posts/4a17b156.html"/>
    <id>http://example.com/posts/4a17b156.html</id>
    <published>2023-07-31T12:33:33.400Z</published>
    <updated>2023-08-11T12:43:35.954Z</updated>
    
    <content type="html"><![CDATA[<h1 id="creat-hair-jnt"><a href="#Creat-Hair-Jnt" class="headerlink" title="Creat Hair Jnt:"></a>Creat Hair Jnt:</h1><p><img src="/img/Hair.gif"></p><p>狗哥版（速度更快）:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"><span class="keyword">import</span> pymel.<span class="built_in">all</span> <span class="keyword">as</span> pm</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">linstep</span>(<span class="params">fmin, fmax, x</span>):</span><br><span class="line">    <span class="keyword">if</span> x &lt; fmin:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">if</span> x &gt; fmax:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> fmin == fmax:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">return</span> (x - fmin) / (fmax - fmin)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">size = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">selection = om.MSelectionList()</span><br><span class="line">softSelection = om.MRichSelection()</span><br><span class="line">om.MGlobal.getRichSelection(softSelection)</span><br><span class="line">softSelection.getSelection(selection)</span><br><span class="line">dagPath = om.MDagPath()</span><br><span class="line">component = om.MObject()</span><br><span class="line"><span class="built_in">iter</span> = om.MItSelectionList( selection,om.MFn.kMeshVertComponent)</span><br><span class="line">d_objects = &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">not</span> <span class="built_in">iter</span>.isDone(): </span><br><span class="line">    <span class="built_in">iter</span>.getDagPath( dagPath, component )</span><br><span class="line">    dagPath.pop()</span><br><span class="line">    node = dagPath.fullPathName()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> d_objects.get(node,<span class="literal">False</span>):</span><br><span class="line">        d_objects[node] = &#123;&#125;</span><br><span class="line">    _d = d_objects[node]</span><br><span class="line">    fnComp = om.MFnSingleIndexedComponent(component)   </span><br><span class="line">    getWeight = <span class="keyword">lambda</span> i: fnComp.weight(i).influence() <span class="keyword">if</span> fnComp.hasWeights() <span class="keyword">else</span> <span class="number">1.0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(fnComp.elementCount()):</span><br><span class="line">        _path = <span class="string">&#x27;%s.vtx[%i]&#x27;</span> % (node, fnComp.element(i))</span><br><span class="line">        _d[<span class="built_in">int</span>(_path.split(<span class="string">&#x27;[&#x27;</span>)[-<span class="number">1</span>].split(<span class="string">&#x27;]&#x27;</span>)[<span class="number">0</span>])] = getWeight(i)</span><br><span class="line">    <span class="built_in">iter</span>.<span class="built_in">next</span>()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> mesh, data <span class="keyword">in</span> d_objects.items():</span><br><span class="line">    model = pm.PyNode(mesh)</span><br><span class="line">    vtxPositions = model.getPoints(space=<span class="string">&#x27;world&#x27;</span>)</span><br><span class="line">    pos_list = []</span><br><span class="line">    grouped_keys = &#123;&#125;</span><br><span class="line">    fmin, fmax = <span class="built_in">min</span>(data.values()), <span class="built_in">max</span>(data.values())</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> data.items():</span><br><span class="line">        normalized_value = linstep(fmin, fmax, value)</span><br><span class="line">        group = <span class="built_in">int</span>(<span class="built_in">round</span>(normalized_value * size))</span><br><span class="line">        <span class="keyword">if</span> group <span class="keyword">not</span> <span class="keyword">in</span> grouped_keys:</span><br><span class="line">            grouped_keys[group] = []</span><br><span class="line">        grouped_keys[group].append(key)</span><br><span class="line"></span><br><span class="line">    sorted_groups = <span class="built_in">sorted</span>(grouped_keys.items(), key=<span class="keyword">lambda</span> x: x[<span class="number">0</span>])</span><br><span class="line">    pos_list = []</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> sorted_groups:    </span><br><span class="line">        selected_vertices = [vertex_index <span class="keyword">for</span> vertex_index <span class="keyword">in</span> value]</span><br><span class="line">        center_position = <span class="built_in">sum</span>([vtxPositions[vertex] <span class="keyword">for</span> vertex <span class="keyword">in</span> selected_vertices]) / <span class="built_in">len</span>(selected_vertices)</span><br><span class="line">        pos_list.append(center_position)</span><br><span class="line">    curve = pm.curve(d=<span class="number">1</span>, p=pos_list[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>狗哥版vtmk:<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">model = pm.ls(sl=<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">start = pm.PyNode(<span class="string">&quot;locator1&quot;</span>)</span><br><span class="line">end = pm.PyNode(<span class="string">&quot;locator2&quot;</span>)</span><br><span class="line">data_path = <span class="string">r&quot;D:\vtkvmtk\centerlines\data.json&quot;</span></span><br><span class="line">exe_path = <span class="string">r&quot;D:\vtkvmtk\centerlines\centerlines.exe&quot;</span></span><br><span class="line">vertices = [<span class="built_in">list</span>(v.getPosition(space=<span class="string">&#x27;world&#x27;</span>)) <span class="keyword">for</span> v <span class="keyword">in</span> model.vtx]</span><br><span class="line">faces = [<span class="built_in">list</span>(face.getVertices()) <span class="keyword">for</span> face <span class="keyword">in</span> model.f]</span><br><span class="line"><span class="comment">#normals = [list(face.getNormal()) for face in model.f]</span></span><br><span class="line">start_position = <span class="built_in">list</span>(start.getTranslation(space=<span class="string">&#x27;world&#x27;</span>))</span><br><span class="line">end_position = <span class="built_in">list</span>(end.getTranslation(space=<span class="string">&#x27;world&#x27;</span>))</span><br><span class="line">startPoints = [start_position]</span><br><span class="line">endPoints = [end_position]</span><br><span class="line">json_data = &#123;&#125;</span><br><span class="line">json_data[<span class="string">&quot;vertices&quot;</span>] = vertices</span><br><span class="line">json_data[<span class="string">&quot;faces&quot;</span>] = faces</span><br><span class="line">json_data[<span class="string">&quot;startPoints&quot;</span>] = startPoints</span><br><span class="line">json_data[<span class="string">&quot;endPoints&quot;</span>] = endPoints</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(data_path, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    json.dump(json_data, f)</span><br><span class="line">command = <span class="string">f&#x27;&quot;<span class="subst">&#123;exe_path&#125;</span>&quot; &quot;<span class="subst">&#123;data_path&#125;</span>&quot;&#x27;</span></span><br><span class="line">process = subprocess.Popen(command, stdout=subprocess.PIPE, shell=<span class="literal">True</span>)</span><br><span class="line">output, _ = process.communicate()</span><br><span class="line">data = <span class="built_in">eval</span>(output.decode())</span><br><span class="line">curve = pm.curve(d=<span class="number">1</span>, p=data)</span><br><span class="line"></span><br></pre></td></tr></table></figure></p><p>晶格版（原始版本）<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2023/08/4 13:35</span></span><br><span class="line"><span class="comment"># @Author  : 倪博</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">快速创建头发等的骨骼</span></span><br><span class="line"><span class="string">先选择起始点</span></span><br><span class="line"><span class="string">打开软选择  注意设置软选的方式</span></span><br><span class="line"><span class="string">范围调整到需要创建骨骼的范围</span></span><br><span class="line"><span class="string">建议把软选择的曲线设为为直线</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"><span class="keyword">import</span> maya.OpenMaya <span class="keyword">as</span> om</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">creatHairJnt</span>(<span class="params">curNums = <span class="built_in">input</span>(<span class="params"></span>),jntNums = <span class="built_in">input</span>(<span class="params"></span>)</span>):</span><br><span class="line">pupils_dictionary = &#123;&#125;</span><br><span class="line">selection = cmds.ls(sl=<span class="literal">True</span>)</span><br><span class="line">sel = selection[<span class="number">0</span>].split(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">richSel = om.MRichSelection()</span><br><span class="line">om.MGlobal.getRichSelection(richSel)</span><br><span class="line">richSelList = om.MSelectionList()</span><br><span class="line">richSel.getSelection(richSelList)</span><br><span class="line">path = om.MDagPath()</span><br><span class="line">component = om.MObject()</span><br><span class="line">richSelList.getDagPath(<span class="number">0</span>, path, component)</span><br><span class="line">componentFn = om.MFnSingleIndexedComponent(component)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,componentFn.elementCount()):</span><br><span class="line">weight = componentFn.weight(i)</span><br><span class="line">v = componentFn.element(i)</span><br><span class="line">w = weight.influence()</span><br><span class="line">vtx = (sel[<span class="number">0</span>]+<span class="string">&#x27;.vtx[%d]&#x27;</span>) % v</span><br><span class="line">pupils_dictionary[vtx] = w</span><br><span class="line"></span><br><span class="line">pm.mel.PolySelectConvert(<span class="number">3</span>)</span><br><span class="line">selection,selNums = cmds.ls(sl=<span class="number">1</span>), []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(selection)):</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;:&#x27;</span> <span class="keyword">in</span> selection[i].split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>]:</span><br><span class="line">selNums.append(<span class="built_in">abs</span>(<span class="built_in">int</span>(re.findall(  <span class="string">r&#x27;\d+&#x27;</span>,selection[i].split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>] )[-<span class="number">1</span>])-<span class="built_in">int</span>(re.findall(  <span class="string">r&#x27;\d+&#x27;</span>,selection[i].split(<span class="string">&#x27;.&#x27;</span>)[-<span class="number">1</span>] )[<span class="number">0</span>])))</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">selNums.append(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 1</span></span><br><span class="line"><span class="comment">#nums = reduce(lambda x,y:x+y,selNums)*1</span></span><br><span class="line">nums = curNums</span><br><span class="line">latticeList = []</span><br><span class="line">d_order=<span class="built_in">sorted</span>(pupils_dictionary.items(),key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>],reverse=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">all</span> = [i[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> d_order]</span><br><span class="line">alls = [<span class="built_in">all</span>[i:i+nums] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(<span class="built_in">all</span>),nums)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> alls:</span><br><span class="line">cmds.select(i)</span><br><span class="line">latticeList.append(cmds.lattice(divisions=(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>), ldv=(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>), objectCentered=<span class="literal">True</span>)[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">num = [<span class="number">1000</span>, <span class="number">800</span>, <span class="number">600</span>, <span class="number">400</span>, <span class="number">200</span>, <span class="number">100</span>, <span class="number">50</span>, <span class="number">25</span>]</span><br><span class="line">cmds.curve(n = sel[<span class="number">0</span>]+<span class="string">&#x27;_meshCurve&#x27;</span>, p = [cmds.xform(i,q=<span class="number">1</span>,t=<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> latticeList], k = [ c <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(latticeList)) ],d=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> num:</span><br><span class="line">cmds.rebuildCurve(sel[<span class="number">0</span>]+<span class="string">&#x27;_meshCurve&#x27;</span>, rt=<span class="number">0</span>, ch=<span class="number">1</span>, end=<span class="number">1</span>, d=<span class="number">5</span>, kr=<span class="number">0</span>, s=i, kcp=<span class="number">0</span>, tol=<span class="number">0.01</span>, kt=<span class="number">0</span>, rpo=<span class="number">1</span>, kep=<span class="number">1</span>)</span><br><span class="line">cmds.DeleteHistory()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmds.rebuildCurve(sel[<span class="number">0</span>]+<span class="string">&#x27;_meshCurve&#x27;</span>, rt=<span class="number">0</span>, ch=<span class="number">1</span>, end=<span class="number">1</span>, d=<span class="number">5</span>, kr=<span class="number">0</span>, s=jntNums, kcp=<span class="number">0</span>, tol=<span class="number">0.01</span>, kt=<span class="number">0</span>, rpo=<span class="number">1</span>, kep=<span class="number">1</span>)</span><br><span class="line">jnts = [cmds.joint(p = cmds.xform(<span class="string">&#x27;%s.ep[%i]&#x27;</span>%(sel[<span class="number">0</span>]+<span class="string">&#x27;_meshCurve&#x27;</span>,i),q=<span class="number">1</span>,t=<span class="number">1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(jntNums+<span class="number">1</span>)]</span><br><span class="line">cmds.select(jnts[<span class="number">0</span>])</span><br><span class="line">cmds.joint(zso=<span class="number">1</span>, ch=<span class="number">1</span>, e=<span class="number">1</span>, oj=<span class="string">&#x27;xyz&#x27;</span>, secondaryAxisOrient=<span class="string">&#x27;zup&#x27;</span>)</span><br><span class="line">cmds.select(sel[<span class="number">0</span>])</span><br><span class="line">cmds.DeleteHistory()</span><br><span class="line">cmds.delete(sel[<span class="number">0</span>]+<span class="string">&#x27;_meshCurve&#x27;</span>)</span><br><span class="line"></span><br><span class="line">creatHairJnt()</span><br><span class="line"></span><br></pre></td></tr></table></figure><br>选面版本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2023/08/4 13:35</span></span><br><span class="line"><span class="comment"># @Author  : 倪博</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">方法二：</span></span><br><span class="line"><span class="string">只需要选择一个起始面即可</span></span><br><span class="line"><span class="string">对于规则模型生成效果更好</span></span><br><span class="line"><span class="string">两个参数   </span></span><br><span class="line"><span class="string">第一个输入值越大  生成越快    同时精度越低  （建议3）</span></span><br><span class="line"><span class="string">第二个为骨骼数目</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lattices = []</span><br><span class="line">mods = cmds.ls(sl=<span class="number">1</span>)</span><br><span class="line"><span class="comment">#num, nums = 5, 20</span></span><br><span class="line">num, nums = <span class="built_in">input</span>(), <span class="built_in">input</span>()</span><br><span class="line">meshs = [i.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> mods]</span><br><span class="line">meshsNum = <span class="built_in">len</span>(<span class="built_in">set</span>(meshs))</span><br><span class="line">meshsSplit = [mods[i:i+meshsNum] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(mods),meshsNum)][<span class="number">0</span>]</span><br><span class="line">meshsPoints = [cmds.ls(<span class="string">&#x27;%s.f[:]&#x27;</span>%i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">set</span>(meshs)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(meshsNum):</span><br><span class="line">sels, latticeIn = [], []</span><br><span class="line">cmds.select(meshsSplit[i])</span><br><span class="line"><span class="keyword">while</span> cmds.ls(sl=<span class="number">1</span>)!=meshsPoints[i]:</span><br><span class="line">[pm.mel.PolySelectTraverse(<span class="number">1</span>) <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(num)]</span><br><span class="line">sels.append(cmds.ls(sl=<span class="number">1</span>))</span><br><span class="line">cmds.select(meshsSplit[i])</span><br><span class="line">latticeIn.append(cmds.lattice(divisions=(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>), ldv=(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>), objectCentered=<span class="literal">True</span>))</span><br><span class="line"><span class="keyword">for</span> s <span class="keyword">in</span> sels[:-<span class="number">1</span>]:</span><br><span class="line">cmds.select(s)</span><br><span class="line">pm.mel.PolySelectTraverse(<span class="number">3</span>)</span><br><span class="line">latticeIn.append(cmds.lattice(divisions=(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>), ldv=(<span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>), objectCentered=<span class="literal">True</span>))</span><br><span class="line">lattices.append(latticeIn)</span><br><span class="line"></span><br><span class="line">curves = []</span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(meshsNum):</span><br><span class="line">curves.append(cmds.curve(n = meshs[l]+<span class="string">&#x27;_meshCurve&#x27;</span>, p = [cmds.xform(i[<span class="number">1</span>],q=<span class="number">1</span>,t=<span class="number">1</span>) <span class="keyword">for</span> i <span class="keyword">in</span> lattices[l]], k = [ c <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(lattices[l])) ],d=<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(meshsNum):</span><br><span class="line">cmds.rebuildCurve(curves[l], rt=<span class="number">0</span>, ch=<span class="number">1</span>, end=<span class="number">1</span>, d=<span class="number">5</span>, kr=<span class="number">0</span>, s=nums, kcp=<span class="number">0</span>, tol=<span class="number">0.01</span>, kt=<span class="number">0</span>, rpo=<span class="number">1</span>, kep=<span class="number">1</span>)</span><br><span class="line">jnts = [cmds.joint(p = cmds.xform(<span class="string">&#x27;%s.ep[%i]&#x27;</span>%(curves[l],i),q=<span class="number">1</span>,t=<span class="number">1</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nums+<span class="number">1</span>)]</span><br><span class="line">cmds.select(jnts[<span class="number">0</span>])</span><br><span class="line">cmds.joint(zso=<span class="number">1</span>, ch=<span class="number">1</span>, e=<span class="number">1</span>, oj=<span class="string">&#x27;xyz&#x27;</span>, secondaryAxisOrient=<span class="string">&#x27;zup&#x27;</span>)</span><br><span class="line">cmds.select(meshs[l])</span><br><span class="line">cmds.DeleteHistory()</span><br><span class="line">cmds.delete(curves[l])</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="detail-con"><a href="#Detail-Con" class="headerlink" title="Detail Con:"></a>Detail Con:</h1><p><img src="/img/Detail.gif"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1、在需要添加次级控制的地方放置locator</span></span><br><span class="line"><span class="string">2、先选择locator，然后加选蒙模型</span></span><br><span class="line"><span class="string">3、直接执行以下代码即可</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Time    : 2023/07/31 13:35</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># @Author  : 倪博</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> maya.cmds <span class="keyword">as</span> cmds</span><br><span class="line"><span class="keyword">import</span> pymel.core <span class="keyword">as</span> pm</span><br><span class="line"></span><br><span class="line"><span class="comment"># PS：detailFK设置成True即生成次级FK，设置成False为正常的次级控制</span></span><br><span class="line"></span><br><span class="line">keepOrientConstraint,detailFK = <span class="literal">True</span>,<span class="literal">False</span></span><br><span class="line">detailLoc,skinMesh = cmds.ls(sl=<span class="number">1</span>)[:-<span class="number">1</span>],cmds.ls(sl=<span class="number">1</span>)[-<span class="number">1</span>]</span><br><span class="line">cmds.lockNode(<span class="string">&quot;initialShadingGroup&quot;</span>, l=<span class="number">0</span>, lu=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">cmds.select(cl=<span class="number">1</span>)</span><br><span class="line">detailGrpNames = [ <span class="string">&#x27;Subtract&#x27;</span>, <span class="string">&#x27;Offset&#x27;</span>, <span class="string">&#x27;Attach&#x27;</span>]</span><br><span class="line">detailJnt, detailJnGrp, detailCon, detailGrp, detailPlane = [], [], [], [], []</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(detailLoc)):</span><br><span class="line">    detailJnt.append( cmds.joint( n = <span class="string">&#x27;Detail_Jnt%i&#x27;</span>%d ) )</span><br><span class="line">    detailJnGrp.append( cmds.group( n = <span class="string">&#x27;Detail_Jnt%i_Offset&#x27;</span>%d ) )</span><br><span class="line">    detailCon.append( cmds.circle( n = <span class="string">&#x27;Detail_Con%i&#x27;</span>%d, r = <span class="number">0.1</span>, ch = <span class="number">0</span> )[<span class="number">0</span>] )</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> detailGrpNames:</span><br><span class="line">         detailGrp.append( cmds.group( n = <span class="string">&#x27;Detail_Grp%i_%s&#x27;</span>%( d, n ), em = <span class="number">0</span> )  )</span><br><span class="line">    detailPlane.append( cmds.polyPlane( n = <span class="string">&#x27;Detail_Plane%i&#x27;</span>%d, sy=<span class="number">1</span>, sx=<span class="number">1</span>, w=<span class="number">0.1</span>, h=<span class="number">0.1</span>, ch = <span class="number">0</span> )[<span class="number">0</span>] )</span><br><span class="line">    cmds.delete( cmds.parentConstraint( [detailLoc[d], <span class="string">&#x27;Detail_Plane%i&#x27;</span>%d ], mo=<span class="number">0</span>, weight=<span class="number">1</span>) )</span><br><span class="line">    cmds.select(cl=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">detailAttachLoc = []</span><br><span class="line">detailPlane = cmds.polyUnite(detailPlane, name=<span class="string">&#x27;Detail_Plane&#x27;</span>, ch=<span class="number">0</span>, mergeUVSets=<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(detailLoc)):</span><br><span class="line">    cmds.select( <span class="string">&#x27;Detail_Plane.f[%i]&#x27;</span>%d, r=<span class="number">1</span> )</span><br><span class="line">    pm.mel.cMuscleSurfAttachSetup()</span><br><span class="line">    cmds.rename(cmds.ls(sl=<span class="number">1</span>)[<span class="number">0</span>],<span class="string">&quot;Detail_Attach_Loc%i&quot;</span>%d)</span><br><span class="line">    cmds.setAttr(<span class="string">&quot;Detail_Attach_LocShape%i.size&quot;</span>%d, <span class="number">0.1</span>)</span><br><span class="line">    detailAttachLoc.append(<span class="string">&quot;Detail_Attach_Loc%i&quot;</span>%d)</span><br><span class="line">cmds.rename(cmds.listRelatives(<span class="string">&quot;Detail_Attach_Loc0&quot;</span>,p=<span class="number">1</span>)[<span class="number">0</span>],<span class="string">&quot;Detail_Attach_Loc_GRP&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">detailAttachGrp = [g <span class="keyword">for</span> g <span class="keyword">in</span> detailGrp <span class="keyword">if</span> g.split(<span class="string">&#x27;_&#x27;</span>)[-<span class="number">1</span>]==<span class="string">&#x27;Attach&#x27;</span> ]</span><br><span class="line">detailSubtractGrp = [g <span class="keyword">for</span> g <span class="keyword">in</span> detailGrp <span class="keyword">if</span> g.split(<span class="string">&#x27;_&#x27;</span>)[-<span class="number">1</span>]==<span class="string">&#x27;Subtract&#x27;</span> ]</span><br><span class="line"><span class="keyword">for</span> d <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(detailLoc)):</span><br><span class="line">    cmds.pointConstraint([ detailAttachLoc[d], detailAttachGrp[d] ], mo=<span class="number">0</span>, weight=<span class="number">1</span>)</span><br><span class="line">    cmds.orientConstraint([ detailAttachLoc[d], detailAttachGrp[d] ], mo=<span class="number">0</span>, weight=<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> keepOrientConstraint:</span><br><span class="line">    cmds.delete( cmds.orientConstraint([ detailAttachLoc[d], detailAttachGrp[d] ], mo=<span class="number">0</span>, weight=<span class="number">1</span>) )</span><br><span class="line">    cmds.delete( cmds.parentConstraint([ detailCon[d], detailJnGrp[d] ], weight=<span class="number">1</span>) )</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">&#x27;translate&#x27;</span>,<span class="string">&#x27;rotate&#x27;</span>,<span class="string">&#x27;scale&#x27;</span>]:</span><br><span class="line">        cmds.connectAttr(<span class="string">&#x27;%s.%s&#x27;</span>%(detailCon[d],i), <span class="string">&#x27;%s.%s&#x27;</span>%(detailJnt[d],i), f=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    translateMultiplyDivide = cmds.createNode(<span class="string">&quot;multiplyDivide&quot;</span>, n = detailCon[d]+<span class="string">&#x27;_Translate_MultiplyDivide&#x27;</span>)</span><br><span class="line">    rotateMultiplyDivide = cmds.createNode(<span class="string">&quot;multiplyDivide&quot;</span>, n = detailCon[d]+<span class="string">&#x27;_Rotate_MultiplyDivide&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> [<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;Z&#x27;</span>]:</span><br><span class="line">        cmds.setAttr(<span class="string">&quot;%s.input2%s&quot;</span>%(translateMultiplyDivide,i), -<span class="number">1</span>)</span><br><span class="line">        cmds.setAttr(<span class="string">&quot;%s.input2%s&quot;</span>%(rotateMultiplyDivide,i), -<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    cmds.connectAttr(<span class="string">&#x27;%s.translate&#x27;</span>%detailCon[d], <span class="string">&#x27;%s.input1&#x27;</span>%translateMultiplyDivide, f=<span class="number">1</span>)</span><br><span class="line">    cmds.connectAttr(<span class="string">&#x27;%s.rotate&#x27;</span>%detailCon[d], <span class="string">&#x27;%s.input1&#x27;</span>%rotateMultiplyDivide, f=<span class="number">1</span>)</span><br><span class="line">    cmds.connectAttr(<span class="string">&#x27;%s.output&#x27;</span>%translateMultiplyDivide, <span class="string">&#x27;%s.translate&#x27;</span>%detailSubtractGrp[d], f=<span class="number">1</span>)</span><br><span class="line">    cmds.connectAttr(<span class="string">&#x27;%s.output&#x27;</span>%rotateMultiplyDivide, <span class="string">&#x27;%s.rotate&#x27;</span>%detailSubtractGrp[d], f=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cmds.duplicate(skinMesh, n = skinMesh+<span class="string">&#x27;_Detail_Skin&#x27;</span>, rr=<span class="number">1</span>)</span><br><span class="line">cmds.blendShape([skinMesh+<span class="string">&#x27;_Detail_Skin&#x27;</span>, skinMesh], n = skinMesh+<span class="string">&#x27;_Detail_BS&#x27;</span>, automatic=<span class="number">1</span>)</span><br><span class="line">cmds.setAttr(<span class="string">&quot;%s.%s&quot;</span>%(skinMesh+<span class="string">&#x27;_Detail_BS&#x27;</span>,skinMesh+<span class="string">&#x27;_Detail_Skin&#x27;</span>), <span class="number">1</span>)</span><br><span class="line">cmds.select([ <span class="string">&#x27;Detail_Plane&#x27;</span>,skinMesh ])</span><br><span class="line">cmds.CreateWrap()</span><br><span class="line"></span><br><span class="line">detailAll = [skinMesh+<span class="string">&#x27;Base&#x27;</span>, <span class="string">&#x27;Detail_Plane&#x27;</span>,<span class="string">&#x27;Detail_Attach_Loc_GRP&#x27;</span>, <span class="string">&#x27;Detail_Loc_GRP&#x27;</span>, <span class="string">&#x27;Detail_Jnt_GRP&#x27;</span>,<span class="string">&#x27;Detail_Con_GRP&#x27;</span>, skinMesh+<span class="string">&#x27;_Detail_Skin&#x27;</span>]   </span><br><span class="line">cmds.group(detailJnGrp, n = <span class="string">&#x27;Detail_Jnt_GRP&#x27;</span>)  </span><br><span class="line">cmds.joint( n = <span class="string">&#x27;Detail_Jnt_Root&#x27;</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> detailFK:</span><br><span class="line">detailJnGrp.reverse()</span><br><span class="line">detailJnt.reverse()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">zip</span>(detailJnGrp[:-<span class="number">1</span>],detailJnt[<span class="number">1</span>:]):</span><br><span class="line">cmds.parent(i)</span><br><span class="line"></span><br><span class="line">cmds.group(detailAttachGrp, n = <span class="string">&#x27;Detail_Con_GRP&#x27;</span>)   </span><br><span class="line">cmds.group(detailLoc, n = <span class="string">&#x27;Detail_Loc_GRP&#x27;</span>)   </span><br><span class="line">cmds.group(detailAll, n = <span class="string">&#x27;DetailSystem&#x27;</span>)   </span><br><span class="line">cmds.hide(detailAll[<span class="number">0</span>:<span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">cmds.select([skinMesh+<span class="string">&#x27;_Detail_Skin&#x27;</span>,<span class="string">&#x27;Detail_Jnt_Root&#x27;</span>])</span><br><span class="line">cmds.select(detailJnt,add=<span class="number">1</span>)</span><br><span class="line">cmds.SmoothBindSkin()</span><br><span class="line">cmds.select(<span class="string">&#x27;DetailSystem&#x27;</span>, r=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h1 id="creat-fk"><a href="#Creat-FK" class="headerlink" title="Creat FK:"></a>Creat FK:</h1><p><img src="/img/FK.gif"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line"># @Time    : 2020/9/7 13:35</span><br><span class="line"># @File    : matchSizeMain.py</span><br><span class="line"># @Author  : nb</span><br><span class="line">from PySide2.QtGui import *</span><br><span class="line">from PySide2.QtCore import *</span><br><span class="line">from PySide2.QtWidgets import *</span><br><span class="line">from PySide2 import QtWidgets</span><br><span class="line">from PySide2 import QtCore</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">from shiboken2 import wrapInstance</span><br><span class="line"></span><br><span class="line">import maya.cmds as cmds</span><br><span class="line">import pymel.core as pm</span><br><span class="line">import math</span><br><span class="line">from functools import reduce</span><br><span class="line"></span><br><span class="line">import maya.OpenMayaUI as omui</span><br><span class="line"></span><br><span class="line">def getMayaMainWin():</span><br><span class="line">    pointer = omui.MQtUtil.mainWindow()</span><br><span class="line">    return wrapInstance(long(pointer), QtWidgets.QWidget)</span><br><span class="line"></span><br><span class="line">mayaWindow = getMayaMainWin()</span><br><span class="line">mayaWindow.setWindowOpacity(1)</span><br><span class="line"></span><br><span class="line">class MyWin(QtWidgets.QDialog):</span><br><span class="line">def __init__(self, parent=getMayaMainWin()):</span><br><span class="line">super(MyWin,self).__init__(parent)</span><br><span class="line">self.setWindowTitle(u&quot;博的控制器工具&quot;)</span><br><span class="line">self.setMinimumWidth(260)</span><br><span class="line">self.setWindowFlags(self.windowFlags()^QtCore.Qt.WindowContextHelpButtonHint)</span><br><span class="line"></span><br><span class="line">self.layout = QVBoxLayout()</span><br><span class="line">self.setLayout(self.layout)</span><br><span class="line"></span><br><span class="line">self.button = QPushButton(&quot;Creat Con&quot;)</span><br><span class="line">self.layout.addWidget(self.button)</span><br><span class="line">self.button.clicked.connect(self.maxConMain)</span><br><span class="line"></span><br><span class="line">self.button = QPushButton(&quot;Scale Con&quot;)</span><br><span class="line">self.layout.addWidget(self.button)</span><br><span class="line">self.button.clicked.connect(self.scalE)</span><br><span class="line"></span><br><span class="line">self.button = QPushButton(&quot;Match Size&quot;)</span><br><span class="line">self.layout.addWidget(self.button)</span><br><span class="line">self.button.clicked.connect(self.matchSizeMain)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">self.show()</span><br><span class="line"></span><br><span class="line"># -------------------------- set color --------------------------</span><br><span class="line"></span><br><span class="line">def changeColors(self,colorName):</span><br><span class="line">    colorDict = &#123;1 : (1, 0, 0), 2 : (1, 1, 0), 3 : (0, 0.016, 0.373),</span><br><span class="line">           4 : (0, 1, 0), 5 : (0.78, 0, 0.78), 6 : (0.263, 1, 0.635),</span><br><span class="line">           7 : (.000, .000, .000), 8 : (.247, .247, .247), 9 : (1 , 1, 1)&#125;</span><br><span class="line">    colorObj = cmds.ls(sl = 1)</span><br><span class="line">    for i in range(len(colorObj)):</span><br><span class="line">        cmds.setAttr(&quot;%s.overrideEnabled&quot;%colorObj[i], 0)</span><br><span class="line">        cmds.color( colorObj[i], rgb = colorDict[colorName] )</span><br><span class="line"></span><br><span class="line">def setColor(self,con):</span><br><span class="line">    conPos = int(cmds.xform(con,q=1,ws=1,t=1)[0])</span><br><span class="line">    if conPos&lt;0:</span><br><span class="line">        changeColors(1)</span><br><span class="line">    elif conPos&gt;0:</span><br><span class="line">        changeColors(3)</span><br><span class="line">    else:changeColors(2)</span><br><span class="line"></span><br><span class="line">def setColor_Main(self):</span><br><span class="line">    jnt = getJnt()[1] </span><br><span class="line">    for j in range(len(jnt)):</span><br><span class="line">        cmds.select(cl=1)</span><br><span class="line">        cmds.select(jnt[j]+&quot;_con&quot;)</span><br><span class="line">        setColor(jnt[j]+&quot;_con&quot;)</span><br><span class="line">        cmds.select(cl=1)</span><br><span class="line">        </span><br><span class="line">#  -------------------------- creat con --------------------------    </span><br><span class="line">def excludeParent(self,allJnt):</span><br><span class="line">    parentJnt = cmds.listRelatives(allJnt,p=1)</span><br><span class="line">    if cmds.objectType( parentJnt ) != &quot;joint&quot;:return self.excludeParent(parentJnt)</span><br><span class="line">    else:return parentJnt</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">def getJnt(self):</span><br><span class="line">    rootJnt, allJnt = cmds.ls(sl=1), []</span><br><span class="line">    cmds.select(rootJnt,hi=1)</span><br><span class="line">    for jnt in cmds.ls(sl=1):</span><br><span class="line">        if cmds.objectType(jnt) ==&quot;joint&quot;:</span><br><span class="line">            allJnt.append(jnt)</span><br><span class="line">            </span><br><span class="line">    return rootJnt, allJnt</span><br><span class="line"></span><br><span class="line">def aboutHier(self,chileAndPareentList):</span><br><span class="line">    for cp in chileAndPareentList:</span><br><span class="line">        cmds.parent(cp)</span><br><span class="line"></span><br><span class="line">def parentCon(self,con,jnt):</span><br><span class="line">    cmds.delete(cmds.parentConstraint(con,jnt,mo=0, weight=1))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">def creatCon(self,aboutJnt, parentConstraints = True):</span><br><span class="line">    </span><br><span class="line">    chileList, parentList, pointPos = [], [], [(0.0, 0.0, -18.609695434570312),(0.0, -3.459063895346508, -3.459063895346508),(0.0, -18.609695434570312, 0.0),(0.0, -3.459063895346508, 3.459063895346508),(0.0, 0.0, 18.609695434570312),(0.0, 3.459063895346508, 3.459063895346508),(0.0, 18.609695434570312, 0.0),(0.0, 3.459063895346508, -3.459063895346508),(0.0, 0.0, -18.609695434570312)]    </span><br><span class="line">    for jnt in range(len(aboutJnt[1])):</span><br><span class="line">    </span><br><span class="line">        if cmds.objectType(aboutJnt[1][jnt]) == &quot;joint&quot;:</span><br><span class="line">            con = cmds.rename(cmds.curve(p = pointPos, k = [ c for c in range(len(pointPos)) ],d=1), &quot;%s%s&quot;%(aboutJnt[1][jnt], &quot;_con&quot;) )</span><br><span class="line"></span><br><span class="line">            conGrp = cmds.group(cmds.ls(sl=1), n = &quot;%s%s&quot;%(con, &quot;_grp&quot;))</span><br><span class="line">            </span><br><span class="line">            self.parentCon(aboutJnt[1][jnt],conGrp )</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            if parentConstraints:</span><br><span class="line">                cmds.parentConstraint(con,aboutJnt[1][jnt],mo=1, weight=1)</span><br><span class="line">            </span><br><span class="line">            if aboutJnt[1][jnt] != aboutJnt[0][0]:</span><br><span class="line">                chileList.append(conGrp)</span><br><span class="line">                parentList.append(&quot;%s%s&quot;%( self.excludeParent(aboutJnt[1][jnt])[0],&quot;_con&quot;))</span><br><span class="line">        else:</span><br><span class="line">            cmds.inViewMessage(amg = &#x27;根骨骼下有啥子东西 &lt;hl&gt;不是骨骼&lt;/hl&gt;.&#x27;, pos = &#x27;midCenter&#x27;, fade = True, fst = 3000)</span><br><span class="line"></span><br><span class="line">    chileAndPareentList = zip(chileList,parentList)</span><br><span class="line">    </span><br><span class="line">    return chileAndPareentList</span><br><span class="line"></span><br><span class="line">def maxConMain(self):</span><br><span class="line">    if cmds.ls(sl=1):</span><br><span class="line">        aboutJnt = self.getJnt()</span><br><span class="line">        chileAndPareentList = self.creatCon(aboutJnt)</span><br><span class="line">        self.aboutHier(chileAndPareentList)</span><br><span class="line">        </span><br><span class="line">        #Layer</span><br><span class="line">        cmds.select(chileAndPareentList[0][1]+&quot;_grp&quot;,r=1)</span><br><span class="line">        pm.createDisplayLayer(nr=1, name=&quot;jntCon&quot;, number=1)</span><br><span class="line">        #ConstraintSystem</span><br><span class="line">        cmds.hide(cmds.parent(cmds.group(&quot;*_parentConstraint1&quot;,n = &quot;ConstraintSystem&quot;),w=1))</span><br><span class="line">        cmds.select(aboutJnt[0],r=1)</span><br><span class="line">        self.setColor_Main()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    else:</span><br><span class="line">        cmds.inViewMessage(amg = &#x27;&lt;hl&gt;请选择根骨骼&lt;/hl&gt;.&#x27;, pos = &#x27;midCenter&#x27;, fade = True, fst = 3000)</span><br><span class="line"></span><br><span class="line">#  -------------------------- scale Con -------------------------- </span><br><span class="line">def length(self,a,b):</span><br><span class="line">    c = [a[i]-b[i] for i in range(len(a))]</span><br><span class="line">    return math.sqrt(reduce(lambda x,y:x+y,[i**2 for i in c]))</span><br><span class="line"></span><br><span class="line">def getRadius(self,con):</span><br><span class="line">    conPos, rList = cmds.xform(con,q=1,t=1,ws=1) ,[]</span><br><span class="line"></span><br><span class="line">    for i in cmds.ls(&quot;%s.cv[:]&quot;%con,fl=1):</span><br><span class="line">        rList.append(self.length(cmds.pointPosition(i),conPos))</span><br><span class="line"></span><br><span class="line">    return max(rList)</span><br><span class="line"></span><br><span class="line">def get_soft_radius(self):</span><br><span class="line">    return pm.softSelect(q=1, ssd=1)</span><br><span class="line"></span><br><span class="line">def scalE(self):</span><br><span class="line">    selList = cmds.ls(sl=1)</span><br><span class="line">    </span><br><span class="line">    for i in range(len(selList)):</span><br><span class="line">        soft_radius=self.get_soft_radius()</span><br><span class="line">        conRadius = self.getRadius(selList[i])</span><br><span class="line">        scaleValue = soft_radius/conRadius</span><br><span class="line">        mesh = cmds.ls(sl=1,o=1)[:]</span><br><span class="line">        for i in range(len(mesh)):</span><br><span class="line">            VerterArray = cmds.ls(&quot;%s.cv[:]&quot;%mesh[i],fl=1)</span><br><span class="line">            cmds.scale(scaleValue,scaleValue,scaleValue,VerterArray)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ------------Common function------------</span><br><span class="line"></span><br><span class="line">def length0(self,a, b):</span><br><span class="line">    c = [a[i] - b[i] for i in range(len(a))]</span><br><span class="line">    return math.sqrt(reduce(lambda x, y: x + y, [i ** 2 for i in c]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getRadius0(self,con):</span><br><span class="line">    conPos, rList = cmds.xform(con, q=1, t=1, ws=1), []</span><br><span class="line">    for i in cmds.ls(&quot;%s.cv[:]&quot; % con, fl=1):</span><br><span class="line">        rList.append(self.length0(cmds.pointPosition(i), conPos))</span><br><span class="line">    return max(rList)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def scaleCon(self,conAndPos, mag=2.5):</span><br><span class="line">    for con in range(len(conAndPos)):</span><br><span class="line">        cmds.select(conAndPos[con][0])</span><br><span class="line">        conRadius = self.getRadius0(conAndPos[con][0])</span><br><span class="line">        minDis = conAndPos[con][1]</span><br><span class="line">        scaleValue = minDis * mag / conRadius</span><br><span class="line">        verterArray = cmds.ls(&quot;%s.cv[:]&quot; % conAndPos[con][0], fl=1)</span><br><span class="line">        cmds.scale(scaleValue, scaleValue, scaleValue, verterArray)</span><br><span class="line">        cmds.select(cl=1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def minDis(self,pointPos, conPos):</span><br><span class="line">    pointConPos = [(pointPos[p], conPos) for p in range(len(pointPos))]</span><br><span class="line">    subList = [[pointConPos[pc][0][n] - pointConPos[pc][1][n] for n in range(3)] for pc in range(len(pointConPos))]</span><br><span class="line">    minDis = min([math.sqrt(reduce(lambda x, y: x + y, [i ** 2 for i in subList[s]])) for s in range(len(subList))])</span><br><span class="line">    return minDis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def minDisList(self,conAndModPos):</span><br><span class="line">    minDisList = []</span><br><span class="line">    for con in range(len(conAndModPos[&quot;con&quot;])):</span><br><span class="line">        minDisList.append(self.minDis(conAndModPos[&quot;mod&quot;], conAndModPos[&quot;con&quot;][con]))</span><br><span class="line">    return minDisList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ------------matchSizeMain()------------</span><br><span class="line"></span><br><span class="line">def getJntAndMod(self,sels):</span><br><span class="line">    jntList = []</span><br><span class="line">    if len(sels) == 2:</span><br><span class="line">        rootJnt, mod = sels[0], sels[1]</span><br><span class="line">        if cmds.objectType(rootJnt) == &#x27;transform&#x27;:</span><br><span class="line">            rootJnt, mod = mod, rootJnt</span><br><span class="line">        cmds.select(mod, d=1)</span><br><span class="line">        cmds.select(rootJnt, hi=1)</span><br><span class="line">        for jnt in cmds.ls(sl=1):</span><br><span class="line">            if cmds.objectType(jnt) == &quot;joint&quot;:</span><br><span class="line">                jntList.append(jnt)</span><br><span class="line">        cmds.select(d=1)</span><br><span class="line">        return [jntList, mod]</span><br><span class="line">    else:</span><br><span class="line">        cmds.warning(&quot;Please select model and rootJnt！！！&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getConAndModPos(self,jntAndMod):</span><br><span class="line">    jntList, mod, pointPos = jntAndMod[0], jntAndMod[1], []</span><br><span class="line">    conPos = [cmds.xform(jntList[jnt], q=1, ws=1, t=1) for jnt in range(len(jntList))]</span><br><span class="line">    pointPos = [list(cmds.pointPosition(i)) for i in cmds.ls(&quot;%s.vtx[:]&quot; % mod, fl=1)]</span><br><span class="line">    return &#123;&quot;con&quot;: conPos, &quot;mod&quot;: pointPos&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getConFromJnt(self,jntList):</span><br><span class="line">    conList = []</span><br><span class="line">    for jnt in range(len(jntList)):</span><br><span class="line">        con = jntList[jnt] + &quot;_con&quot;</span><br><span class="line">        conList.append(con)</span><br><span class="line">    return conList</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def matchSizeMain(self,nums=2.5):</span><br><span class="line">    jntAndMod = self.getJntAndMod(cmds.ls(sl=1))</span><br><span class="line">    conAndModPos = self.getConAndModPos(jntAndMod)</span><br><span class="line">    minDisLists = self.minDisList(conAndModPos)</span><br><span class="line">    conList = self.getConFromJnt(jntAndMod[0])</span><br><span class="line">    conAndPos = zip(conList, minDisLists)</span><br><span class="line">    self.scaleCon(conAndPos, nums)</span><br><span class="line"></span><br><span class="line"># ------------scaleselectedConMain()------------</span><br><span class="line"></span><br><span class="line">def selectNurbsCurve(self):</span><br><span class="line">    cmds.select(cmds.ls(type=&#x27;nurbsCurve&#x27;, v=1), tgl=1)</span><br><span class="line">    cmds.select(cmds.listRelatives(cmds.ls(sl=1), p=1))</span><br><span class="line">    print &quot;请加选模型&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getConAndMod(self,sels):</span><br><span class="line">    conList, mod = sels[0:-1], sels[-1]</span><br><span class="line">    cmds.select(d=1)</span><br><span class="line">    cmds.select(cmds.listRelatives(mod, c=1), r=1)</span><br><span class="line">    modShape = cmds.ls(sl=1)</span><br><span class="line">    if len(modShape) &gt;= 2:</span><br><span class="line">        cmds.select(d=1)</span><br><span class="line">        print &quot;请选择模型&quot;</span><br><span class="line">    elif cmds.objectType(modShape) == &#x27;mesh&#x27;:</span><br><span class="line">        return [conList, mod]</span><br><span class="line">    else:</span><br><span class="line">        cmds.select(d=1)</span><br><span class="line">        print(&quot;请选择模型&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def getConAndModPos(self,conAndMod):</span><br><span class="line">    conList, mod, pointPos = conAndMod[0], conAndMod[1], []</span><br><span class="line">    conPos = [cmds.xform(conList[con], q=1, ws=1, t=1) for con in range(len(conList))]</span><br><span class="line">    pointPos = [list(cmds.pointPosition(i)) for i in cmds.ls(&quot;%s.vtx[:]&quot; % mod, fl=1)]</span><br><span class="line">    return &#123;&quot;con&quot;: conPos, &quot;mod&quot;: pointPos&#125;</span><br><span class="line"></span><br><span class="line">def scaleselectedConMain(self,nums=2.5):</span><br><span class="line">    conAndMod = getConAndMod(cmds.ls(sl=1))</span><br><span class="line">    conAndModPos = self.getConAndModPos(conAndMod)</span><br><span class="line">    minDisLists = self.minDisList(conAndModPos)</span><br><span class="line">    conAndPos = zip(conAndMod[0], minDisLists)</span><br><span class="line">    self.scaleCon(conAndPos, nums)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">myCon = MyWin()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;creat-hair-jnt&quot;&gt;&lt;a href=&quot;#Creat-Hair-Jnt&quot; class=&quot;headerlink&quot; title=&quot;Creat Hair Jnt:&quot;&gt;&lt;/a&gt;Creat Hair Jnt:&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/img/Hair.</summary>
      
    
    
    
    <category term="codes" scheme="http://example.com/categories/codes/"/>
    
    
  </entry>
  
  <entry>
    <title>Favorite movies</title>
    <link href="http://example.com/posts/faf281f6.html"/>
    <id>http://example.com/posts/faf281f6.html</id>
    <published>2023-07-25T14:20:59.000Z</published>
    <updated>2023-11-19T14:51:20.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="绝命毒师"><a href="#绝命毒师" class="headerlink" title="绝命毒师"></a>绝命毒师</h1><p>Sometimes,I feel like I never actually make any of my own.<br>I was … really …I was alive.<br>I like it,and I was good at.</p><p><a href="https://vidhub.tv/voddetail/21420.html"><img src="/img/绝命毒师.jpg" alt="绝命毒师"></a></p><h1 id="赛博朋克-边缘行者"><a href="#赛博朋克-边缘行者" class="headerlink" title="赛博朋克 边缘行者"></a>赛博朋克 边缘行者</h1><p>This is it.<br>It’s the end of the line for me.<br>But not for you.<br>Fast is what you do best, ain’t it?<br>Now, run.</p><p><a href="https://www.ysjihe.cc/vodplay/524425-68-1.html"><img src="/img/img.png" alt="赛博朋克"></a></p><h1 id="言叶之庭"><a href="#言叶之庭" class="headerlink" title="言叶之庭"></a>言叶之庭</h1><p>我啊……<br>无法顺利地走下去了，<br>不知从什么时候起。</p><p><a href="https://www.ysjihe.cc/vodplay/524425-68-1.html"><img src="/img/言叶之庭.jpg" alt="言叶之庭"></a></p><h1 id="地下拳击俱乐部"><a href="#地下拳击俱乐部" class="headerlink" title="地下拳击俱乐部"></a>地下拳击俱乐部</h1><p>You met me at a very strange time in my life.<br><a href="https://www.92kys.com/play/11684-1-1/"><img src="/img/地下拳击俱乐部.jpg" alt="地下拳击俱乐部"></a></p><h1 id="行尸之惧"><a href="#行尸之惧" class="headerlink" title="行尸之惧"></a>行尸之惧</h1><p>Do not wait for your deathbed to enjoy your champagne.<br><a href="https://www.zsych.net/play/xingshizhijudiyiji_2_1.html"><img src="/img/行尸之惧.jpg" alt="行尸之惧"></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;绝命毒师&quot;&gt;&lt;a href=&quot;#绝命毒师&quot; class=&quot;headerlink&quot; title=&quot;绝命毒师&quot;&gt;&lt;/a&gt;绝命毒师&lt;/h1&gt;&lt;p&gt;Sometimes,I feel like I never actually make any of my own.&lt;br&gt;</summary>
      
    
    
    
    <category term="moves" scheme="http://example.com/categories/moves/"/>
    
    
  </entry>
  
  <entry>
    <title>罪恶装备</title>
    <link href="http://example.com/posts/b29ace19.html"/>
    <id>http://example.com/posts/b29ace19.html</id>
    <published>2023-07-25T14:20:59.000Z</published>
    <updated>2023-07-27T15:36:17.413Z</updated>
    
    <content type="html"><![CDATA[<p>绑定骨骼架设的参考书籍<br><div class="row">    <embed src="/pdf/罪恶装备系绑定骨骼架设入门.pdf" width="100%" height="550" type="application/pdf"></div></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;绑定骨骼架设的参考书籍&lt;br&gt;

	&lt;div class=&quot;row&quot;&gt;
    &lt;embed src=&quot;/pdf/罪恶装备系绑定骨骼架设入门.pdf&quot; width=&quot;100%&quot; height=&quot;550&quot; type=&quot;application/pdf&quot;&gt;
	&lt;/div&gt;


&lt;</summary>
      
    
    
    
    <category term="works" scheme="http://example.com/categories/works/"/>
    
    
  </entry>
  
</feed>
